<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuzh0507.github.io</id>
    <title>Station of Alvin</title>
    <updated>2023-09-27T19:28:36.910Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuzh0507.github.io"/>
    <link rel="self" href="https://yuzh0507.github.io/atom.xml"/>
    <subtitle>Record every step of my way</subtitle>
    <logo>https://yuzh0507.github.io/images/avatar.png</logo>
    <icon>https://yuzh0507.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Station of Alvin</rights>
    <entry>
        <title type="html"><![CDATA[Git]]></title>
        <id>https://yuzh0507.github.io/post/git/</id>
        <link href="https://yuzh0507.github.io/post/git/">
        </link>
        <updated>2023-09-27T12:48:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="initialize-repo">Initialize Repo</h1>
<pre><code class="language-bash">git init
# Based on ~/.gitconfig, build a set of files, store in ./.git/
# The rest of current folder is workspace, used for project files

git config user.name &quot;a&quot;
# Only modify information in ./.git/config

git config --global user.name &quot;A&quot;
#Modify ~/.gitconfig
</code></pre>
<h1 id="git-add">git add</h1>
<pre><code class="language-bash">git cat-file
# Check git files
# -t : Check types
# -p : Check content
# -s : Check size

git add &lt;filename&gt;
# Creat blob file under ./.git/objects/, store added files or changes
# Files in bolb under ./.git/objects/ are compressed added files or changes
# The file name of blob is a calculated string according to hash
</code></pre>
<h1 id="withdraw">Withdraw</h1>
<pre><code class="language-bash">git reset --&lt;filename&gt;
# Withdraw &quot;git add &lt;filename&gt;&quot;

git checkout --&lt;filename&gt;
# Withdraw a commit, back to the last commit

git reset --soft HEAD~&lt;n&gt;
# Roll back n times commit
</code></pre>
<h1 id="git-commit">git commit</h1>
<pre><code class="language-bash">git commit -m &quot;commit message&quot;
# Commit files to Git Repository
# Create commit file in ./.git/objects/, store commit information (tree, author, commit time, ...)
# Create tree in ./.git/objects/, store files information (permission, blob, file name, ...)


# ./.git/HEAD is a pointer pointing the working branch
# Details for branch can be found in ./.git/refs/heads

# Making a &quot;git commit&quot; to modified files, will create new commit file in ./.git/objects/, the &quot;parent&quot; pointer will point to the old commit file
</code></pre>
<h1 id="branch">Branch</h1>
<pre><code class="language-bash">git branch
# List all branches

git branch -a 
# List all branches including remote branches

git branch &lt;branch name&gt;
# Create a new branch

git branch -d/D &lt;branch name&gt;
# d: Confirm if this branch is merged before delete the branch
# D: Force delete

git checkout &lt;branch name&gt;
# Change working branch

git checkout -b &lt;branch name&gt;
# Create a new branch and change working branch to it

# Recover a branch:
# 1. Check the history
git reflog
# 2. Check out to specified commit
git checkout &lt;commit code&gt;
# 3. Create a new branch and checkout to it
git checkout -b &lt;branch name&gt;
</code></pre>
<h1 id="git-diff">git diff</h1>
<pre><code class="language-bash">git diff
# Show the difference between files in working repository and index, used to check changed content before &quot;git add&quot;

git diff --cached
# Show the difference between files in index and repo, used to check changed content before &quot;git commit&quot;
</code></pre>
<h1 id="add-remote-repo">Add Remote Repo</h1>
<pre><code class="language-bash">git remote add &lt;repo name&gt; &lt;Github URL&gt;
# Add remote repo information in .git/config

git push -u &lt;repo name&gt; &lt;branch&gt;
# Push commit to specifed branch in a remote repo
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Operating System]]></title>
        <id>https://yuzh0507.github.io/post/operating-system/</id>
        <link href="https://yuzh0507.github.io/post/operating-system/">
        </link>
        <updated>2022-09-04T14:50:22.000Z</updated>
        <content type="html"><![CDATA[<p>Video Link: <a href="https://www.youtube.com/watch?v=vBURTt97EkA&amp;list=PLBlnK6fEyqRiVhbXDGLXDk_OQAeuVcp2O">Introduction to Operating System - YouTube</a></p>
<h1 id="1-introduction">1 Introduction</h1>
<p>An Operating System is a program that manages the computer hardware.</p>
<p>It also provides a basis for application programs and acts as an intermediary between computer users and computer hardware.</p>
<p>e.g., Windows, Linux, Android, iOS…</p>
<h1 id="2-basics-of-os">2 Basics of OS</h1>
<h2 id="21-computer-system-operation">2.1 Computer System Operation</h2>
<p>A modern general-purpose computer system consists of</p>
<ul>
<li>one or more CPUs,</li>
<li>a number of device controllers connected through a common bus that provides access to shared memory</li>
</ul>
<p>Each device controller is in charge of a specific type of device</p>
<p>The CPU and the device controllers can execute concurrently, competing for memory cycles</p>
<p>To ensure orderly access to the shared memory, a memory controller is provided whose function is to synchronize access to the memory</p>
<ul>
<li>Some important terms:
<ul>
<li>
<p><strong>Bootstrap Program</strong></p>
<p>The initial program that runs when a computer is powered up or rebooted</p>
<p>It is stored in the ROM</p>
<p>It must know how to load the OS and start executing that system</p>
<p>It must locate and load into memory the OS kernel</p>
</li>
<li>
<p><strong>Interrupt</strong></p>
<p>The occurrence of an event is usually signaled by an Interrupt from Hardware or Software</p>
<p>Hardware may trigger an interrupt at any time by sending a signal to the CPU, usually by the way of the system bus.</p>
</li>
<li>
<p>System Call (Monitor Call)</p>
<p>Software may trigger an interrupt by executing a special operation called System Call</p>
</li>
</ul>
</li>
</ul>
<p>When the CPU is interrupted, it stops what it is doing and immediately transfers execution to a fixed location. (The fixed location usually contains the starting address where the Service Routine of the interrupt is located)</p>
<p>The Interrupt Service Routine executes.</p>
<p>On completion, the CPU resumes the interrupted computation</p>
<h2 id="22-storage-structure">2.2 Storage Structure</h2>
<h2 id="23-io-structure">2.3 I/O Structure</h2>
<p>A large portion of operating system code is dedicated to managing I/O, both because of its importance to the reliability and performance of a system and because of the varying nature of the devices.</p>
<p>A general-purpose computer system consists of CPUs and multiple device controllers that are connected through a common bus</p>
<p>Each device controller is in charge of a specific type of device</p>
<p>A device maintains Local Buffer Storage and  a set of Special Purpose Registers</p>
<p>Typically, operating systems have a device driver for each device controller</p>
<p>This device driver understands the device controller and presents a uniform interface to the device to the rest of the operating system</p>
<h1 id="3-computer-system-architecture">3 Computer System Architecture</h1>
<ul>
<li>Types of Computer Systems based on the number of General Purpose Processors:
<ul>
<li>
<p><strong>1. Single Processor System</strong></p>
<p>One main CPU is capable of executing a general purpose instruction set including instructions from user processes</p>
<p>Other special purpose processors are also present which perform device-specific tasks</p>
</li>
<li>
<p><strong>2. Multiprocessor System</strong></p>
<p>Also known as parallel systems or tightly coupled systems.</p>
<p>Has two or more processors in close communication, sharing the computer bus and sometimes the clock, memory, and peripheral devices</p>
<p>Advantages:<br>
Increased throughput<br>
Economy of scale<br>
Increased reliability</p>
</li>
<li>
<p><strong>3. Clustered System</strong></p>
<p>Like multiprocessor systems, clustered systems gather together multiple CPUs to accomplish computational work</p>
<p>They are composed of two or more individual systems coupled together</p>
<p>Provides high availability</p>
<p>Can be structured asymmetrically (one machine in Host-Standby mode, others run applications),<br>
or symmetrically (two or more hosts run applications, and monitor each other)</p>
</li>
</ul>
</li>
</ul>
<h1 id="4-operating-system-structure">4 Operating System Structure</h1>
<ul>
<li>Commonality
<ul>
<li>
<p>Multiprogramming</p>
<p>A single user cannot, in general, keep either the CPU or the I/O devices busy at all time</p>
<p>Multiprogramming increases CPU utilization by organizing jobs (code and data) so that the CPU always has one to execute.</p>
<p>Multiprogrammed systems provide an environment in which the various system resources are utilized effectively, but they do not provide for user interaction with the computer system.</p>
</li>
<li>
<p>Time Sharing (Multitasking)</p>
<p>CPU executes multiple jobs by switching among them</p>
<p>Switches occur so frequently that the users can interact with each program while it is running</p>
<p>Time-sharing requires an interactive (or hands-on) computer system, which provides direct communication between the user and the system.</p>
<p>A time-shared operating system allows many users to share the computer simultaneously.</p>
<p>Uses CPU scheduling and multiprogramming to provide each user with a small portion of a time-shared computer.</p>
<p>Each user has at least one separate program in memory</p>
<p>A program loaded into memory and executing is called a “PROCESS”</p>
</li>
</ul>
</li>
</ul>
<h1 id="5-operating-system-services">5 Operating System Services</h1>
<p>An OS provides an environment for the execution of programs</p>
<p>It provides certain services to programs and to users of those programs.</p>
<ol>
<li>User Interface (Command line Interface, or Graphic User Interface)</li>
<li>Program Execution</li>
<li>I/O Operations</li>
<li>File System Manipulation</li>
<li>Communications</li>
<li>Error Detection</li>
<li>Resource Allocation</li>
<li>Accounting</li>
<li>Protection and Security</li>
</ol>
<h1 id="6-user-operating-system-interface">6 User Operating System Interface</h1>
<p>CLI allows users to directly enter commands that are to be performed by the operating system</p>
<p>GUI allows users to interface with the operating system in a graphic way</p>
<p>Some operating systems include the command interpreter in the kernel.</p>
<p>Others, such as Windows XP and UNIX, treat the command interpreter as a special program.</p>
<p>On systems with multiple command interpreters to choose from, the interpreters are known as shells. (e.g., Bourne shell, C shell, Bourne-Again Shell, Korn shell, etc.)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Structure and Algorithm in C++]]></title>
        <id>https://yuzh0507.github.io/post/data-structure-and-algorithm-in-c/</id>
        <link href="https://yuzh0507.github.io/post/data-structure-and-algorithm-in-c/">
        </link>
        <updated>2022-05-19T02:26:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="1-introduction">1. Introduction</h2>
<p>Main memory is divided into 3 sections: Code Section, Stack, Heap</p>
<ul>
<li>
<p><strong>Static Memory Allocation</strong></p>
<p>How many bytes of memory are required by a certain function was decided at compile time.</p>
</li>
<li>
<p><strong>Stack</strong></p>
<p>After the function is completely executed, the memory will be deleted. The sequence of allocating memory depends on the sequence of executing functions, and the sequence of deleting memory is contrary. So this area is a <strong>stack</strong> (First In Last Out).</p>
</li>
<li>
<p><strong>Heap</strong></p>
<p><strong>Heap</strong> is used for unorganized memory. It shall be treated as a resource. Programs cannot directly access the heap memory, which can only be accessed by a pointer.</p>
</li>
<li>
<p><strong>Physical Data Structure</strong></p>
<p>Structures define how the memory shall be organized for storing the elements or data. (e.g. array, linked list)</p>
</li>
<li>
<p><strong>Logical Data Structure</strong></p>
<p>Structures are implemented using any Physical Data Structure.<br>
Linear: stack(FILO), queue(FIFO)<br>
Non-linear: tree, graph<br>
Tablet: Hashtable</p>
</li>
<li>
<p><strong>Abstract DataType</strong></p>
<p>ADT defines data and operations on data together, and lets it be used as a DataType by hiding all the internal details.</p>
</li>
<li>
<p><strong>Time Complexity</strong></p>
<ul>
<li>
<p>O(n) (pronounciate as “order n”)</p>
<p>For input that has n elements, the program needs n steps to complete the execution.</p>
</li>
<li>
<p>Ignore coefficient</p>
<p>When calculating the time complexity, all the coefficients shall be ignored. E.g., for 2n and n are both seen as O(n)</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Complexity Expression</th>
</tr>
</thead>
<tbody>
<tr>
<td>constant</td>
<td>O(1)</td>
</tr>
<tr>
<td>Linear</td>
<td>O(n)</td>
</tr>
<tr>
<td>Logarithmic</td>
<td>O(log n)</td>
</tr>
<tr>
<td>Quadratic</td>
<td>O(n<sup>2</sup>)</td>
</tr>
<tr>
<td>Exponential</td>
<td>O(2<sup>n</sup>)</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="2-recursion">2. Recursion</h2>
<p>A function is calling itself is called recursion. Inside the function, there must be some condition which will make the recursion stop.</p>
<pre><code class="language-c++">void fun1(int n)
{
	if(n&gt;0)
	{
		cout &lt;&lt; n &lt;&lt; ' '; // Calling time
		fun1(n-1);
	}
}
// Input: 3
// Output: 3 2 1

void fun2(int n)
{
	if(n&gt;0)
	{		
		fun2(n-1);
		cout &lt;&lt; n &lt;&lt; ' '; // Returning time
	}
}
// Input: 3
// Output: 1 2 3
</code></pre>
<ul>
<li>
<p><strong>Static Variables</strong></p>
<p>Static variables will be treated as a global variable.</p>
<pre><code class="language-c++">// int x = 0; //The same as define a static variable within the function
void fun(int n)
{
	static int x = 0;
	if(n&gt;0)
	{
		x++;
		return fun(n-1) + x;
	}
	return 0;
}
// Input: 5
// Output: 25
</code></pre>
</li>
<li>
<p><strong>Type of Recursion</strong></p>
<ul>
<li>
<p>Tail Recursion</p>
<p>The recursive call is the last statement in a function</p>
<pre><code class="language-c++">// Tail Recursion
void fun1(int n)
{
	if(n&gt;0)
	{
		cout &lt;&lt; n &lt;&lt; ' ';
		fun1(n-1);

}
// Time Complexity: O(n)
// Space Complexity: O(n)
// Everytime the fun1 is called, a new area of memory needs to be built. 

// For loop
void fun2(int n)
{
	while (n &gt; 0)
	{
		cout &lt;&lt; n &lt;&lt; ' ';
		n--;
	}
}
// Time Complexity: O(n)
// Space Complexity: O(1)
</code></pre>
<p>For tail recursion, loop is more efficient in terms of space.</p>
</li>
<li>
<p>Head Recursion</p>
<p>The recursive call is the first statement in a function</p>
<pre><code class="language-c++">// Head Recursion
void fun1(int n)
{
	if(n&gt;0)
	{		
		fun1(n-1);
		cout &lt;&lt; n &lt;&lt; ' ';
	}
}
// Time Complexity: O(n)
// Space Complexity: O(n)
// Everytime the fun1 is called, a new area of memory needs to be built. 

// For loop
void fun2(int n)
{
	int i = 1;
	while (i &lt;= n)
	{
		cout &lt;&lt; i &lt;&lt; ' ';
		i++;
	}
}
// Time Complexity: O(n)
// Space Complexity: O(1)
</code></pre>
<p>For head recursion, loop is more efficient in terms of space.</p>
</li>
<li>
<p>Tree Recursion</p>
<p>If the function is calling itself just once, it’s a Linear Recursion. (Head &amp; Trail Recursion are special ones)</p>
<p>If the function is calling itself more than once, it’s a Tree Recursion.</p>
<pre><code class="language-c++">// Head Recursion
void fun1(int n)
{
	if(n&gt;0)
	{
		cout &lt;&lt; n &lt;&lt; ' ';
		fun1(n-1);
		fun1(n-1);
	}
	return 0;
}
// Time Complexity: O(2^n)
// Space Complexity: O(n)
// Everytime the fun1 is called, a new area of memory needs to be built. 
</code></pre>
</li>
<li>
<p>Indirect Recursion</p>
<p>There are more than one functions, one of them is calling one another.</p>
<pre><code class="language-c++">void fun1(int n)
{
	if(n&gt;0)
	{
		cout &lt;&lt; n &lt;&lt; ' ';
		fun2(n-1);
	}
}

void fun2(int n)
{
	if(n&gt;1)
	{
		cout &lt;&lt; n &lt;&lt; ' ';
		fun1(n/2);
	}
}
// Input for fun1: 20
// Output: 20 19 9 8 4 3 1
</code></pre>
</li>
<li>
<p>Nested Recursion</p>
<p>Recursion inside recursion.</p>
<pre><code class="language-c++">void fun(int n)
{
	if(n&gt;100)
	{
		return n-10;
	}
	else
	{
		return fun(fun(n+11));
	}
}
// Input: 95
// Output: 91
// fun(95) = fun(fun(106)) = fun(96) = fun(97) = ... = fun(fun111)) = fun(101) = 91
</code></pre>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="3-array">3. Array</h2>
<ul>
<li>
<p><strong>Initialization</strong></p>
<pre><code class="language-c++">// Static: arrange a piece of memory in stack
					                   //	 -0-1-2-3-4-	
int A[5];                    // A|?|?|?|?|?|
int A[5] = {2, 4, 6, 8, 10}; // A|2|4|6|8|10|
int A[5] = {2, 4};           // A|2|4|0|0|0|
int A[5] = {0};              // A|0|0|0|0|0|
int A[] = {2, 4, 6, 8, 10};  // A|2|4|6|8|10|

// Dynamic: arrange a piece of memory in the heap
// Must use a pointer points to the address of array in the heap
int *p = new int[5];
delete []p;
</code></pre>
</li>
<li>
<p><strong>Access</strong></p>
<pre><code class="language-c++">int val = A[2];
int val = 2[A];
int val = *(A+2);
</code></pre>
</li>
<li>
<p><strong>2D Array</strong></p>
<pre><code class="language-c++">int A[3][4];

(int *)A[3];
A[0] = new int[4];
A[1] = new int[4];
A[2] = new int[4];

(int **)A;
int A = new int[3];
A[0] = new int[4];
A[1] = new int[4];
A[2] = new int[4];
</code></pre>
</li>
</ul>
<hr>
<h2 id="4-matrix">4. Matrix</h2>
<ul>
<li>
<p>Diagonal Matrix</p>
<pre><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; M = {{3, 0, 0, 0, 0},
						  {0, 7, 0, 0, 0},
						  {0, 0, 4, 0, 0},
						  {0, 0, 0, 9, 0},
						  {0, 0, 0, 0, 6}};
// If i != j, M[i][j] = 0
</code></pre>
</li>
<li>
<p>Lower Triangular Matrix</p>
<pre><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; M = {{a11,  0 ,  0 ,  0 ,  0 },
						  {a21, a22,  0 ,  0 ,  0 },
						  {a31, a32, a33,  0 ,  0 },
						  {a41, a42, a43, a44,  0 },
						  {a51, a52, a53, a54, a55}};
// If i &lt; j, M[i][j] = 0
</code></pre>
</li>
<li>
<p>Upper Triangular Matrix</p>
<pre><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; M = {{a11, a12, a13, a14, a15},
						  { 0 , a22, a23, a24, a25},
						  { 0 ,  0 , a33, a34, a35},
						  { 0 ,  0 ,  0 , a44, a45},
						  { 0 ,  0 ,  0 ,  0 , a55}};
// If i &gt; j, M[i][j] = 0
</code></pre>
</li>
<li>
<p>Symmetric Matrix</p>
<pre><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; M = {{ 2 ,  2 ,  2 ,  2 , 2 },
						  { 2 ,  3 ,  3 ,  3 , 3 },
						  { 2 ,  3 ,  4 ,  4 , 4 },
						  { 2 ,  3 ,  4 ,  5 , 5 },
						  { 2 ,  3 ,  4 ,  5 , 6 }};
// M[i][j] = M[j][i]
</code></pre>
</li>
<li>
<p>Tridiagonal Matrix</p>
<pre><code class="language-c++">vector&lt;vector&lt;int&gt;&gt; M = {{a11, a21,  0 ,  0 ,  0 },
						  {a21, a22, a23,  0 ,  0 },
						  { 0 , a32, a33, a34,  0 },
						  { 0 ,  0 , a43, a44, a45},
						  { 0 ,  0 ,  0 , a54, a55}};
// If |i - j| &lt;= 1, M[i][j] = non-zero
// If |i - j| &gt; 1, M[i][j] = 0
</code></pre>
</li>
</ul>
<hr>
<h1 id="algorithm">Algorithm</h1>
<h2 id="1-introduction-2">1. Introduction</h2>
<p>Differences between algorithm and program</p>
<ul>
<li>
<p>Characteristics of algorithm</p>
<ol>
<li>Input: 0 or more</li>
<li>Output: at least 1</li>
<li>Definiteness</li>
<li>Finiteness</li>
<li>Effectiveness</li>
</ol>
</li>
<li>
<p>Criteria</p>
<ol>
<li>Time</li>
<li>Space</li>
<li>Network consumption</li>
<li>Power consumption</li>
<li>CPU registers</li>
</ol>
</li>
<li>
<p>Asymptotic Notations</p>
<p><strong>O</strong>: big-oh, upper bound</p>
<p><strong>Ω</strong>: big-omega, lower bound</p>
<p><strong>θ</strong>: theta, average bound</p>
</li>
</ul>
<hr>
<h2 id="2-divide-and-conquer">2. Divide and Conquer</h2>
<p>Devide the whole problem into several small questions, design solutions for small questions, integrate the small solutions into the whole solution</p>
<h3 id="21-recurrence-relation-decreasing">2.1 Recurrence Relation Decreasing</h3>
<h3 id="22-masters-theorem-decreasing-function">2.2 Masters Theorem Decreasing Function</h3>
<p>T(n) = aT(n-b) + f(n) (a&gt;0, b&gt;0, f(n) = O(n<sup>k</sup>) while k ≥ 0)<br>
if a &lt; 1, O(n<sup>k</sup>)<br>
if a = 1, O(n<sup>k+1</sup>)<br>
if a &gt; 1, O(n<sup>k</sup> a<sup>n/b</sup>)</p>
<h3 id="23-recurrence-relation-dividing-function">2.3 Recurrence Relation Dividing Function</h3>
<h3 id="24-masters-theorem-dividing-function">2.4 Masters Theorem Dividing Function</h3>
<figure data-type="image" tabindex="1"><img src="https://yuzh0507.github.io/post-images/1654071299318.png" alt="" loading="lazy"></figure>
<h3 id="25-recurrence-root-function">2.5 Recurrence Root Function</h3>
<figure data-type="image" tabindex="2"><img src="https://yuzh0507.github.io/post-images/1654071304531.png" alt="" loading="lazy"></figure>
<h3 id="26-binary-search">2.6 Binary Search</h3>
<p>Iteration</p>
<pre><code class="language-c++">BinSearch(vector&lt;int&gt; A, int n, int key) // n = A.size()
{
	int low = 0, high = n-1;
	while (low &lt;= high)
	{
		mid = (low+high) / 2;
		if(key == A[mid])
			return mid;
		else if(key &lt; A[mid])
			high = mid-1;
		else
			low = mid+1;
	}
	return -1;
}
</code></pre>
<p>Recursion</p>
<pre><code class="language-c++">RecBinSearch(vector&lt;int&gt; &amp; A, int low, int high, int key) // n = A.size()
{
	if(low == high)
	{
		if(A[low] == key)
			return low;
		else
			return -1;
	}
	else
	{
		mid = (low+high) / 2;
		if(key == A[mid])
			return mid;
		else if(key &lt; A[mid])
			return RecBinSearch(A, low, mid-1, key);
		else
			return RecBinSearch(A, mid+1, high, key);
	}
}
</code></pre>
<hr>
<h2 id="3-greedy-method">3 Greedy Method</h2>
<p>For optimization problems(require minimum/maximum result)</p>
<pre><code>n = 5
a = [a1, a2, a3, a4, a5]

Algorithm Greedy(a,n)
{
    for(i = 1; i &lt;= n; i++)
    {
        x = select(a);
        if Feasible(x)
            solution = solution + x;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode Record]]></title>
        <id>https://yuzh0507.github.io/post/leetcode-record/</id>
        <link href="https://yuzh0507.github.io/post/leetcode-record/">
        </link>
        <updated>2022-05-04T00:51:04.000Z</updated>
        <content type="html"><![CDATA[<p>In order to learn C++ programming skills, I decide to start to do exercises on <a href="https://leetcode.com/">LeetCode</a>.</p>
<h1 id="easy-problems">Easy Problems</h1>
<p><a href="https://yuzh0507.github.io/post/1-two-sum">1. Two Sum</a><br>
<a href="https://yuzh0507.github.io/post/9-palindrome-number">9. Palindrome Number</a><br>
<a href="https://yuzh0507.github.io/post/13-roman-to-integer">13. Roman to Integer</a><br>
<a href="https://yuzh0507.github.io/post/26-remove-duplicates-from-sorted-array">26. Remove Duplicates from Sorted Array</a><br>
<a href="https://yuzh0507.github.io/post/94-binary-tree-inorder-traversal">94. Binary Tree Inorder Traversal</a></p>
<h1 id="medium-problems">Medium Problems</h1>
<p><a href="https://yuzh0507.github.io/post/2-add-two-numbers">2. Add Two Numbers</a><br>
<a href="https://yuzh0507.github.io/post/3-longest-substring-without-repeating-characters">3. Longest Substring Without Repeating Characters</a><br>
<a href="https://yuzh0507.github.io/post/5-longest-palindromic-substring">5. Longest Palindromic Number</a><br>
<a href="https://yuzh0507.github.io/post/6-zigzag-conversion">6. Zigzag Conversion</a><br>
<a href="https://yuzh0507.github.io/post/7-reverse-integer">7. Reverse Integer</a><br>
<a href="https://yuzh0507.github.io/post/8-string-to-integer-atoi">8. String to Integer (atoi)</a><br>
<a href="https://yuzh0507.github.io/post/11-container-with-most-water">11. Container With Most Water</a><br>
<a href="https://yuzh0507.github.io/post/12-integer-to-roman">12. Integer to Roman</a><br>
<a href="https://yuzh0507.github.io/post/15-3sum">15. 3Sum</a><br>
<a href="https://yuzh0507.github.io/post/16-3sum-closest">16. 3Sum Closest</a><br>
<a href="https://yuzh0507.github.io/post/17-letter-combinations-of-a-phone-number">17. Letter Combinations of a Phone Number</a><br>
<a href="https://yuzh0507.github.io/post/18-4sum">18. 4Sum</a><br>
<a href="https://yuzh0507.github.io/post/19-remove-nth-node-from-end-of-list">19. Remove Nth Node From End of List</a><br>
<a href="https://yuzh0507.github.io/post/24-swap-nodes-in-pairs">24. Swap Nodes in Pairs</a><br>
<a href="https://yuzh0507.github.io/post/31-next-permutation">31. Next Permutation</a><br>
<a href="https://yuzh0507.github.io/post/33-search-in-rotated-sorted-array">33. Search in Rotated Sorted Array</a><br>
<a href="https://yuzh0507.github.io/post/34-find-first-and-last-position-of-element-in-sorted-array">34. Find First and Last Position of Element in Sorted Array</a><br>
<a href="https://yuzh0507.github.io/post/36-valid-sudoku">36. Valid Sudoku</a><br>
<a href="https://yuzh0507.github.io/post/38-count-and-say">38. Count and Say</a><br>
<a href="https://yuzh0507.github.io/post/39-combination-sum">39. Combination Sum</a><br>
<a href="https://yuzh0507.github.io/post/40-combination-sum-ii">40. Combination Sum II</a><br>
<a href="https://yuzh0507.github.io/post/43-multiply-strings">43. Multiply Strings</a><br>
<a href="https://yuzh0507.github.io/post/45-jump-game-ii">45. Jump Game II</a><br>
<a href="https://yuzh0507.github.io/post/46-permutations">46. Permutations</a><br>
<a href="https://yuzh0507.github.io/post/47-permutations-ii">47. Permutations II</a><br>
<a href="https://yuzh0507.github.io/post/48-rotate-image">48. Rotate Image</a><br>
<a href="https://yuzh0507.github.io/post/49-group-anagrams">49. Group Anagrams</a><br>
<a href="https://yuzh0507.github.io/post/50-powx-n">50. Pow(x, n)</a><br>
<a href="https://yuzh0507.github.io/post/54-spiral-matrix">54. Spiral Matrix</a><br>
<a href="https://yuzh0507.github.io/post/55-jump-game">55. Jump Game</a><br>
<a href="https://yuzh0507.github.io/post/56-merge-intervals">56. Merge Intervals</a><br>
<a href="https://yuzh0507.github.io/post/57-insert-interval">57. Insert Interval</a><br>
<a href="https://yuzh0507.github.io/post/59-spiral-matrix-ii">59. Spiral Matrix II</a><br>
<a href="https://yuzh0507.github.io/post/61-rotate-list">61. Rotate List</a><br>
<a href="https://yuzh0507.github.io/post/62-unique-paths">62. Unique Paths</a><br>
<a href="https://yuzh0507.github.io/post/63-unique-paths-ii">63. Unique Paths II</a><br>
<a href="https://yuzh0507.github.io/post/64-minimum-path-sum">64. Minimum Path Sum</a><br>
<a href="https://yuzh0507.github.io/post/71-simplify-path">71. Simplify Path</a><br>
<a href="https://yuzh0507.github.io/post/73-set-matrix-zeroes">73. Set Matrix Zeroes</a><br>
<a href="https://yuzh0507.github.io/post/74-search-a-2d-matrix">74. Search a 2D Matrix</a><br>
<a href="https://yuzh0507.github.io/post/77-combinations">77. Combinations</a><br>
<a href="https://yuzh0507.github.io/post/78-subsets">78. Subsets</a><br>
<a href="https://yuzh0507.github.io/post/79-word-search">79. Word Search</a><br>
<a href="https://yuzh0507.github.io/post/80-remove-duplicates-from-sorted-array-ii">80. Remove Duplicates from Sorted Array II</a><br>
<a href="https://yuzh0507.github.io/post/81-search-in-rotated-sorted-array-ii">81. Search in Rotated Sorted Array II</a><br>
<a href="https://yuzh0507.github.io/post/82-remove-duplicates-from-sorted-list-ii">82. Remove Duplicates from Sorted List II</a><br>
<a href="https://yuzh0507.github.io/post/86-partition-list">86. Partition List</a><br>
<a href="https://yuzh0507.github.io/post/89-gray-code">89. Gray Code</a><br>
<a href="https://yuzh0507.github.io/post/90-subsets-ii">90. Subsets II</a><br>
<a href="https://yuzh0507.github.io/post/91-decode-ways">91. Decode Ways</a><br>
<a href="https://yuzh0507.github.io/post/92-reverse-linked-list-ii">92. Reverse Linked List II</a><br>
<a href="https://yuzh0507.github.io/post/93-restore-ip-addresses">93. Restore IP Addresses</a></p>
<h1 id="hard-problems">Hard Problems</h1>
<p><a href="https://yuzh0507.github.io/post/10-regular-expression-matching">10. Regular Expression Matching</a><br>
<a href="https://yuzh0507.github.io/post/23-merge-k-sorted-lists">23. Merge k Sorted Lists</a><br>
<a href="https://yuzh0507.github.io/post/25-reverse-nodes-in-k-group">25. Reverse Nodes in k-Group</a><br>
<a href="https://yuzh0507.github.io/post/30-substring-with-concatenation-of-all-words">30. Substring with Concatenation of All Words</a><br>
<a href="https://yuzh0507.github.io/post/32-longest-valid-parentheses">32. Longest Valid Parentheses</a><br>
<a href="https://yuzh0507.github.io/post/37-sudoku-solver">37. Sudoku Solver</a><br>
<a href="https://yuzh0507.github.io/post/41-first-missing-positive">41. First Missing Positive</a><br>
<a href="https://yuzh0507.github.io/post/42-trapping-rain-water">42. Trapping Rain Water</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UDP Summary]]></title>
        <id>https://yuzh0507.github.io/post/udp-summary/</id>
        <link href="https://yuzh0507.github.io/post/udp-summary/">
        </link>
        <updated>2019-11-04T10:52:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-summary">1 Summary</h1>
<p>UDP(User Datagram Protocol) is a regular and simple protocol of the transport layer. It offers service of transmitting messages between applications.</p>
<h1 id="2-format">2 Format</h1>
<h2 id="21-udp-header">2.1 UDP Header</h2>
<figure data-type="image" tabindex="1"><img src="https://yuzh0507.github.io/post-images/1572865440084.PNG" alt="" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>Field</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>Source Port</td>
<td>The transport port of sending process</td>
</tr>
<tr>
<td>Destination Port</td>
<td>The transport port of the destination of the message</td>
</tr>
<tr>
<td>Length</td>
<td>Length in octets of of this datagram including header and data</td>
</tr>
<tr>
<td>checksum</td>
<td>The 16-bit one’s complement of the one’s complement sum of a pseudo header</td>
</tr>
</tbody>
</table>
<h2 id="22-pseudo-header">2.2 Pseudo Header</h2>
<figure data-type="image" tabindex="2"><img src="https://yuzh0507.github.io/post-images/1572865765825.PNG" alt="" loading="lazy"></figure>
<p>The pseudo header includes IP address in addition to UDP information. The specific implementation will be discussed in next update.</p>
<h1 id="3-user-interface">3 User Interface</h1>
<p>A user interface should allow:</p>
<ul>
<li>The creation of new receive ports,</li>
<li>receive operations on the receive ports that return the data octets and an indication of source port and source address,</li>
<li>an operation that allows a datagram to be sent, specifying the data, source and destination ports and addresses to be sent.</li>
</ul>
<h1 id="4-ip-interface">4 IP Interface</h1>
<p>The UDP module must be able to determine the source and destination internet addresses and the protocol field from the internet header. One possible UDP/IP interface would return the whole internet datagram including all of the internet header in response to a receive operation. Such an interface would also allow the UDP to pass a full internet datagram complete with header to the IP to send. The IP would verify certain fields for consistency and compute the internet header checksum.</p>
<h1 id="5-ports">5 Ports</h1>
<p>The UDP well-known ports is identical to TCP well-known ports. Some frequently used ports are showned as below.</p>
<table>
<thead>
<tr>
<th>Port Number</th>
<th>Application Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>53</td>
<td>DNS</td>
</tr>
<tr>
<td>67, 68</td>
<td>DHCP</td>
</tr>
</tbody>
</table>
<h1 id="6-implementation-in-automotive-ethernet">6 Implementation in Automotive Ethernet</h1>
<h2 id="61-application-scenarios">6.1 Application Scenarios</h2>
<p>Most messages within the automotive Environment are considerably important which need reliable service provided by the transport layer. Since the UDP is good at speed but not reliable, the utilization shall be deliberated by designers.</p>
<h2 id="62-length">6.2 Length</h2>
<p>Since the MTU of automotive Ethernet is constantly 1500 Bytes, designers may forbid the fragmenation of IP. In this case, The length of UDP messages shall be limited to fulfill the limitation of MTU.</p>
]]></content>
    </entry>
</feed>