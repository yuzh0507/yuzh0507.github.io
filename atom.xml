<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuzh0507.github.io</id>
    <title>Station of Alvin</title>
    <updated>2022-05-04T07:34:56.476Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuzh0507.github.io"/>
    <link rel="self" href="https://yuzh0507.github.io/atom.xml"/>
    <subtitle>Record every step of my way</subtitle>
    <logo>https://yuzh0507.github.io/images/avatar.png</logo>
    <icon>https://yuzh0507.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Station of Alvin</rights>
    <entry>
        <title type="html"><![CDATA[13. Roman to Integer]]></title>
        <id>https://yuzh0507.github.io/post/13-roman-to-integer/</id>
        <link href="https://yuzh0507.github.io/post/13-roman-to-integer/">
        </link>
        <updated>2022-05-04T07:14:14.000Z</updated>
        <content type="html"><![CDATA[<p>Problem</p>
<blockquote>
<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>I</td>
<td>1</td>
</tr>
<tr>
<td>V</td>
<td>5</td>
</tr>
<tr>
<td>X</td>
<td>10</td>
</tr>
<tr>
<td>L</td>
<td>50</td>
</tr>
<tr>
<td>C</td>
<td>100</td>
</tr>
<tr>
<td>D</td>
<td>500</td>
</tr>
<tr>
<td>M</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.<br>
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:<br>
· I can be placed before V (5) and X (10) to make 4 and 9. <br>
· X can be placed before L (50) and C (100) to make 40 and 90. <br>
· C can be placed before D (500) and M (1000) to make 400 and 900.<br>
Given a roman numeral, convert it to an integer.</p>
</blockquote>
<p>Link: <a href="https://leetcode.com/problems/roman-to-integer/">https://leetcode.com/problems/roman-to-integer/</a></p>
<pre><code class="language-C++">class Solution {
public:
    int romanToInt(string s) {
        int sum = 0;
        for(int i = 0; i &lt; s.size(); i++){
            // Use switch() to seperate characters
            switch (s[i])
            {
            // If 'I' occurs befor 'V' or 'X', the summary shall subtract 1, otherwise plus 1
            case 'I': 
                if (s[i+1] == 'V' || s[i+1] == 'X' )
                    sum -= 1;
                else
                    sum += 1;
                break;
            case 'V': 
                sum += 5;
                break;
            // If 'X' occurs befor 'L' or 'C', the summary shall subtract 10, otherwise plus 10
            case 'X': 
                if (s[i+1] == 'L' || s[i+1] == 'C' )
                    sum -= 10;
                else
                    sum += 10;
                break;
            case 'L': 
                sum += 50;
                break;
            // If 'C' occurs befor 'D' or 'M', the summary shall subtract 100, otherwise plus 100
            case 'C': 
                if (s[i+1] == 'D' || s[i+1] == 'M' )
                    sum -= 100;
                else
                    sum += 100;
                break;
            case 'D': 
                sum += 500;
                break;
            case 'M': 
                sum += 1000;
                break;        
            default:
                break;
            }
        }
        return sum;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[9. Palindrome Number]]></title>
        <id>https://yuzh0507.github.io/post/9-palindrome-number/</id>
        <link href="https://yuzh0507.github.io/post/9-palindrome-number/">
        </link>
        <updated>2022-05-04T07:13:22.000Z</updated>
        <content type="html"><![CDATA[<p>Problem</p>
<blockquote>
<p>Given an integer x, return true if x is palindrome integer.<br>
An integer is a palindrome when it reads the same backward as forward.<br>
For example, 121 is a palindrome while 123 is not.</p>
</blockquote>
<p>Constraints</p>
<blockquote>
<p>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</p>
</blockquote>
<p>Link: <a href="https://leetcode.com/problems/palindrome-number/">https://leetcode.com/problems/palindrome-number/</a></p>
<pre><code class="language-C++">class Solution {
public:
    bool isPalindrome(int x) {
        vector&lt;int&gt; nums;
        if (x &lt; 0)
            return false;
        if (x == 0)
            return true;
   
        for (int tmp = x; tmp &gt; 0; tmp /= 10){
            nums.push_back(tmp%10);     // Push back every number into the vector
        }

        for (int i = 0, j = nums.size()-1; i &lt;= j;){
            // Compare numbers from both sides to the middle.
            // If any pair is not equal, return false. If every pair is equal, return true
            if (nums[i] == nums[j])
            {
                i++, j--;
                if (i &gt;= j)
                    return true;
                continue;
            }       
            return false;
        }
        return false;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. Two Sum]]></title>
        <id>https://yuzh0507.github.io/post/1-two-sum/</id>
        <link href="https://yuzh0507.github.io/post/1-two-sum/">
        </link>
        <updated>2022-05-04T07:13:05.000Z</updated>
        <content type="html"><![CDATA[<p>Problem</p>
<blockquote>
<p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.<br>
You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>
You can return the answer in any order.</p>
</blockquote>
<p>Constraints</p>
<blockquote>
<p>2 &lt;= nums.length &lt;= 10<sup>4</sup><br>
-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup><br>
-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup><br>
Only one valid answer exists</p>
</blockquote>
<p>Link: <a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></p>
<pre><code class="language-C++">class Solution {
public:
    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {
        for (int i = 0; i &lt; nums.size(); i++){              // Use i to traverse the nums
            for (int j = i+1; j &lt; nums.size(); j++){        // Use j to traverse the rest elements from i to the end of nums
                if(nums[i] + nums[j] == target){        
                    return {i,j};                   // If the sum of two elements equals the target, return their position.
                }
            }
        }
        
        return {0};     // If there are no two elements whose sum equals the target, return 0
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode Record]]></title>
        <id>https://yuzh0507.github.io/post/leetcode-record/</id>
        <link href="https://yuzh0507.github.io/post/leetcode-record/">
        </link>
        <updated>2022-05-04T00:51:04.000Z</updated>
        <content type="html"><![CDATA[<p>In order to learn C++ programming skills, I decide to start to do exercises on <a href="https://leetcode.com/">LeetCode</a>.</p>
<h1 id="easy-problems">Easy Problems</h1>
<p><a href="https://yuzh0507.github.io/post/1-two-sum">1. Two Sum</a><br>
<a href="https://yuzh0507.github.io/post/9-palindrome-number">9. Palindrome Number</a><br>
<a href="https://yuzh0507.github.io/post/13-roman-to-integer">13. Roman to Integer</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[UDP Summary]]></title>
        <id>https://yuzh0507.github.io/post/udp-summary/</id>
        <link href="https://yuzh0507.github.io/post/udp-summary/">
        </link>
        <updated>2019-11-04T10:52:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-summary">1 Summary</h1>
<p>UDP(User Datagram Protocol) is a regular and simple protocol of the transport layer. It offers service of transmitting messages between applications.</p>
<h1 id="2-format">2 Format</h1>
<h2 id="21-udp-header">2.1 UDP Header</h2>
<figure data-type="image" tabindex="1"><img src="https://yuzh0507.github.io/post-images/1572865440084.PNG" alt="" loading="lazy"></figure>
<table>
<thead>
<tr>
<th>Field</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>Source Port</td>
<td>The transport port of sending process</td>
</tr>
<tr>
<td>Destination Port</td>
<td>The transport port of the destination of the message</td>
</tr>
<tr>
<td>Length</td>
<td>Length in octets of of this datagram including header and data</td>
</tr>
<tr>
<td>checksum</td>
<td>The 16-bit one’s complement of the one’s complement sum of a pseudo header</td>
</tr>
</tbody>
</table>
<h2 id="22-pseudo-header">2.2 Pseudo Header</h2>
<figure data-type="image" tabindex="2"><img src="https://yuzh0507.github.io/post-images/1572865765825.PNG" alt="" loading="lazy"></figure>
<p>The pseudo header includes IP address in addition to UDP information. The specific implementation will be discussed in next update.</p>
<h1 id="3-user-interface">3 User Interface</h1>
<p>A user interface should allow:</p>
<ul>
<li>The creation of new receive ports,</li>
<li>receive operations on the receive ports that return the data octets and an indication of source port and source address,</li>
<li>an operation that allows a datagram to be sent, specifying the data, source and destination ports and addresses to be sent.</li>
</ul>
<h1 id="4-ip-interface">4 IP Interface</h1>
<p>The UDP module must be able to determine the source and destination internet addresses and the protocol field from the internet header. One possible UDP/IP interface would return the whole internet datagram including all of the internet header in response to a receive operation. Such an interface would also allow the UDP to pass a full internet datagram complete with header to the IP to send. The IP would verify certain fields for consistency and compute the internet header checksum.</p>
<h1 id="5-ports">5 Ports</h1>
<p>The UDP well-known ports is identical to TCP well-known ports. Some frequently used ports are showned as below.</p>
<table>
<thead>
<tr>
<th>Port Number</th>
<th>Application Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>53</td>
<td>DNS</td>
</tr>
<tr>
<td>67, 68</td>
<td>DHCP</td>
</tr>
</tbody>
</table>
<h1 id="6-implementation-in-automotive-ethernet">6 Implementation in Automotive Ethernet</h1>
<h2 id="61-application-scenarios">6.1 Application Scenarios</h2>
<p>Most messages within the automotive Environment are considerably important which need reliable service provided by the transport layer. Since the UDP is good at speed but not reliable, the utilization shall be deliberated by designers.</p>
<h2 id="62-length">6.2 Length</h2>
<p>Since the MTU of automotive Ethernet is constantly 1500 Bytes, designers may forbid the fragmenation of IP. In this case, The length of UDP messages shall be limited to fulfill the limitation of MTU.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[README]]></title>
        <id>https://yuzh0507.github.io/post/readme/</id>
        <link href="https://yuzh0507.github.io/post/readme/">
        </link>
        <updated>2019-11-04T08:48:32.000Z</updated>
        <content type="html"><![CDATA[<p>After entering an automotive company, I suddenly started to work on the R&amp;D of automotive Ethernet as a fresh graduate major in machinery. I’ve learned a lot from some awesome people in the Internet. One year after my induction, I’d like to share something I’v learned and discuss with you to improve each other.</p>
]]></content>
    </entry>
</feed>